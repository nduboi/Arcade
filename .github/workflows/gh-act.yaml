name: CheckRepo
on:
  workflow_dispatch:
  push:
    branches-ignore:
      - 'ga-ignore-*'
  pull_request:
    types:
      - opened

env:
  EXECUTABLES: "arcade"

jobs:
  check_program_compilation:
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    steps:
      - name: get_repo
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0
      - name: Install SDL2 image development package
        run: |
          apt update
          apt install -y libsdl2-*
      - name: Install Allegro image development package
        run: |
          apt update
          apt install -y liballegro*5.2 liballegro*5-dev
      - name: Install QT5 image development package
        run: |
          apt update
          apt install -y qtbase5-dev
      - name: compilation_project
        run: |
          ./shell/cmpRelease.sh
        timeout-minutes: 5
      - name: clean_project
        run: |
          ./shell/clrRepo.sh
      - name: Check if there is executable
        run : |
          IFS=','
          for element in $EXECUTABLES
          do
              if [ ! -f "$element" ]; then
                  exit 1;
              fi
          done
      - name: Create doxygen documentation
        run: |
          apt update
          apt upgrade
          apt install -y doxygen graphviz
          ./shell/generateDoc.sh
      - name: Upload documentation as artifact
        uses: actions/upload-artifact@v4.6.1
        with:
          name: documentation-html
          path: ./doc/
      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4.6.1
        with:
          name: arcade_bin
          path: ./arcade
      - name: Upload dynamic libary as artifact
        uses: actions/upload-artifact@v4.6.1
        with:
          name: library
          path: ./lib/

  check_coding_style:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: get_repo
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0
      - name: print coding_styles_errors
        shell: bash
        run: |
          check.sh $(pwd) $(pwd)
          file="coding-style-reports.log"
          x=0
          while IFS= read -r line; do
              IFS=':'
              read -ra parts <<< "$line"
              echo "::error  title=${parts[2]} coding style error,file=${parts[0]},line=${parts[1]}::${parts[3]}"
              x=1
          done < "$file"
          if [ "$x" -eq 1 ]; then
              exit 1
          fi
      - name: Upload coding style report as artifact
        uses: actions/upload-artifact@v4.6.1
        with:
          name: coding-style-reports
          path: ./coding-style-reports.log
